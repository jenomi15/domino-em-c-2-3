#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdbool.h>

#define TOTAL_PECAS 28
#define PECAS_POR_JOGADOR 21
#define TAMANHO_MAX_MESA 27
int quantidadedireita;
int indexJogador2;
int quantidadeesquerda;
int indexJogador1;
int indexpecasnaodistribuidas;
int ladodireito[27][2];
int jogador2[21][2];
int ladoesquerdo[27][2];
int jogador1[21][2];
int pecasNaoDistribuidas[14][2];
int turno;
int quantidade;


void salvarjogo1() {
    FILE *pecasNaoDistribuidasTxt, *indexpecasnaodistribuidasTxt, *jogador1Txt, *indexJogador1Txt, *ladoesquerdoTxt, *quantidadeesquerdaTxt, *jogador2Txt, *indexJogador2Txt, *ladodireitoTxt, *quantidadedireitaTxt, *turnoTxt, *quantidadeTxt;

    pecasNaoDistribuidasTxt = fopen("pecasNaoDistribuidas.txt", "wb");
    indexpecasnaodistribuidasTxt = fopen("indexpecasnaodistribuidas.txt", "wb");
    jogador1Txt = fopen("jogador1.txt", "wb");
    indexJogador1Txt = fopen("indexJogador1.txt", "wb");
    ladoesquerdoTxt = fopen("ladoesquerdo.txt", "wb");
    quantidadeesquerdaTxt = fopen("quantidadeesquerda.txt", "wb");
    jogador2Txt = fopen("jogador2.txt", "wb");
    indexJogador2Txt = fopen("indexJogador2.txt", "wb");
    ladodireitoTxt = fopen("ladodireito.txt", "wb");
    quantidadedireitaTxt = fopen("quantidadedireita.txt", "wb");
    turnoTxt = fopen("turno.txt", "wb");
    quantidadeTxt = fopen("quantidade.txt", "wb");

    if (pecasNaoDistribuidasTxt == NULL || indexpecasnaodistribuidasTxt == NULL || jogador1Txt == NULL ||
        indexJogador1Txt == NULL || ladoesquerdoTxt == NULL || quantidadeesquerdaTxt == NULL ||
        jogador2Txt == NULL || indexJogador2Txt == NULL || ladodireitoTxt == NULL || quantidadedireitaTxt == NULL || turnoTxt == NULL || quantidadeTxt == NULL) {
        printf("Erro em abrir os arquivos.\n");
        return;
    }

    
    

    fwrite(&quantidadedireita, sizeof(int), 1, quantidadedireitaTxt);
    fwrite(&indexJogador2, sizeof(int), 1, indexJogador2Txt);
    fwrite(&quantidadeesquerda, sizeof(int), 1, quantidadeesquerdaTxt);
    fwrite(&indexJogador1, sizeof(int), 1, indexJogador1Txt);
    fwrite(&indexpecasnaodistribuidas, sizeof(int), 1, indexpecasnaodistribuidasTxt);
    fwrite(ladodireito, sizeof(int), 27 * 2, ladodireitoTxt);
    fwrite(jogador2, sizeof(int), 21 * 2, jogador2Txt);
    fwrite(ladoesquerdo, sizeof(int), 27 * 2, ladoesquerdoTxt);
    fwrite(jogador1, sizeof(int), 21 * 2, jogador1Txt);
    fwrite(pecasNaoDistribuidas, sizeof(int), 14 * 2, pecasNaoDistribuidasTxt);
    fwrite(&turno, sizeof(int), 1, turnoTxt);
    fwrite(&quantidade, sizeof(int), 1, quantidadeTxt);

    fclose(pecasNaoDistribuidasTxt);
    fclose(indexpecasnaodistribuidasTxt);
    fclose(jogador1Txt);
    fclose(indexJogador1Txt);
    fclose(ladoesquerdoTxt);
    fclose(quantidadeesquerdaTxt);
    fclose(jogador2Txt);
    fclose(indexJogador2Txt);
    fclose(ladodireitoTxt);
    fclose(quantidadedireitaTxt);
    fclose(turnoTxt);
    fclose(quantidadeTxt);

}
void carregarjogo1() {
    FILE *pecasNaoDistribuidasTxt, *indexpecasnaodistribuidasTxt, *jogador1Txt, *indexJogador1Txt, *ladoesquerdoTxt, *quantidadeesquerdaTxt, *jogador2Txt, *indexJogador2Txt, *ladodireitoTxt, *quantidadedireitaTxt, *turnoTxt, *quantidadeTxt;

    pecasNaoDistribuidasTxt = fopen("pecasNaoDistribuidas.txt", "rb");
    indexpecasnaodistribuidasTxt = fopen("indexpecasnaodistribuidas.txt", "rb");
    jogador1Txt = fopen("jogador1.txt", "rb");
    indexJogador1Txt = fopen("indexJogador1.txt", "rb");
    ladoesquerdoTxt = fopen("ladoesquerdo.txt", "rb");
    quantidadeesquerdaTxt = fopen("quantidadeesquerda.txt", "rb");
    jogador2Txt = fopen("jogador2.txt", "rb");
    indexJogador2Txt = fopen("indexJogador2.txt", "rb");
    ladodireitoTxt = fopen("ladodireito.txt", "rb");
    quantidadedireitaTxt = fopen("quantidadedireita.txt", "rb");
    turnoTxt = fopen("turno.txt", "rb");
    quantidadeTxt = fopen("quantidade.txt", "rb");

    if (pecasNaoDistribuidasTxt == NULL || indexpecasnaodistribuidasTxt == NULL || jogador1Txt == NULL ||
        indexJogador1Txt == NULL || ladoesquerdoTxt == NULL || quantidadeesquerdaTxt == NULL ||
        jogador2Txt == NULL || indexJogador2Txt == NULL || ladodireitoTxt == NULL || quantidadedireitaTxt == NULL || turnoTxt == NULL || quantidadeTxt == NULL) {
        printf("Erro em abrir os arquivos.\n");
        return;
    }

   
    

    fread(&quantidadedireita, sizeof(int), 1, quantidadedireitaTxt);
    fread(&indexJogador2, sizeof(int), 1, indexJogador2Txt);
    fread(&quantidadeesquerda, sizeof(int), 1, quantidadeesquerdaTxt);
    fread(&indexJogador1, sizeof(int), 1, indexJogador1Txt);
    fread(&indexpecasnaodistribuidas, sizeof(int), 1, indexpecasnaodistribuidasTxt);
    fread(ladodireito, sizeof(int), 27 * 2, ladodireitoTxt);
    fread(jogador2, sizeof(int), 21 * 2, jogador2Txt);
    fread(ladoesquerdo, sizeof(int), 27 * 2, ladoesquerdoTxt);
    fread(jogador1, sizeof(int), 21 * 2, jogador1Txt);
    fread(pecasNaoDistribuidas, sizeof(int), 14 * 2, pecasNaoDistribuidasTxt);
    fread(&turno, sizeof(int), 1, turnoTxt);
    fread(&quantidade, sizeof(int), 1, quantidadeTxt);

    fclose(pecasNaoDistribuidasTxt);
    fclose(indexpecasnaodistribuidasTxt);
    fclose(jogador1Txt);
    fclose(indexJogador1Txt);
    fclose(ladoesquerdoTxt);
    fclose(quantidadeesquerdaTxt);
    fclose(jogador2Txt);
    fclose(indexJogador2Txt);
    fclose(ladodireitoTxt);
    fclose(quantidadedireitaTxt);
    fclose(turnoTxt);
    fclose(quantidadeTxt);
}







int validarEscolha1(int escolha1[2], int jogador[][2], int index) {
    for (int i = 0; i <= index; i++) {
        if (jogador[i][0] == escolha1[0] && jogador[i][1] == escolha1[1]) {
            return 1;  // Escolha válida
        }
    }
    return 0;  // Escolha inválida
}
void imprimirPecas(int jogador[][2], int quantidade, const char* jogadorNome) {
    printf("%s: ", jogadorNome);
    for (int i = 0; i < quantidade; i++) {
        printf("[%d|%d] ", jogador[i][0], jogador[i][1]);
    }
    printf("\n");
}
int validarEscolha2(int escolha2[2], int jogador[][2], int index) {
    for (int i = 0; i <= index; i++) {
        if (jogador[i][0] == escolha2[0] && jogador[i][1] == escolha2[1]) {
            return 1;  // Escolha válida
        }
    }
    return 0;  // Escolha inválida
}
int* escolherPecaJogador2(int jogador2[][2], int indexjogador2) {
    int *escolha2 = (int*)malloc(2 * sizeof(int));  // Alocação dinâmica para armazenar a escolha

    do {
        printf("\ndigite os valores da peça desejada %d:\n", indexjogador2 );

        // Exibir as peças disponíveis na mão do jogador 1
        imprimirPecas(jogador2, indexjogador2, "jogador2");
        scanf("%d", &escolha2[0]);
        scanf("%d", &escolha2[1]);

    } while (!validarEscolha2(escolha2, jogador2, indexjogador2));

    return escolha2;
}
void comprarPeca(int pecasNaoDistribuidas[][2], int *indexPecasNaoDistribuidas, int jogador[][2], int *indexJogador) {
    if (*indexPecasNaoDistribuidas > 0) {
        // Adicionar uma peça do topo das peças não distribuídas à mão do jogador
        jogador[*indexJogador][0] = pecasNaoDistribuidas[*indexPecasNaoDistribuidas - 1][0];
        jogador[*indexJogador][1] = pecasNaoDistribuidas[*indexPecasNaoDistribuidas - 1][1];

        // Remover a peça da pilha de peças não distribuídas
        (*indexPecasNaoDistribuidas)--;

        // Atualizar o índice do jogador
        (*indexJogador)++;
    } else {
        printf("Não há mais peças disponíveis para compra.\n");
    }
}
bool comparacaoesquerda(int ladoesquerdo[TAMANHO_MAX_MESA][2],int quantidadeesquerda , int peca_escolhida[0][2]){
    if (ladoesquerdo[quantidadeesquerda ][0] == peca_escolhida[0][0] && ladoesquerdo[quantidadeesquerda ][1] == peca_escolhida[0][1]) {    // talvez na0 prcise do -1
        // Ambos os lados da peça escolhida são iguais aos da peça da mesa
        return true;
    }

    if (ladoesquerdo[quantidadeesquerda][0] == peca_escolhida[0][0]){
        return true ;
    }else if (ladoesquerdo[quantidadeesquerda][0] == peca_escolhida[0][1]){
        int temp = peca_escolhida[0][1];
        peca_escolhida[0][1] = peca_escolhida[0][0];
        peca_escolhida[0][0] = temp;
        return true;
    }else{
        return false ;
    }
}
bool comparacaodireita(int ladodireito[TAMANHO_MAX_MESA][2], int quantidadedireita , int peca_escolhida[0][2]){

    if (ladodireito[quantidadedireita ][1] == peca_escolhida[0][0] && ladodireito[quantidadedireita ][0] == peca_escolhida[0][1]) {
        // Ambos os lados da peça escolhida são iguais aos da peça da mesa
        return true;
    }
    if (ladodireito[quantidadedireita][1] == peca_escolhida[0][0]) {
        return true ;
    }else if (ladodireito[quantidadedireita][1] == peca_escolhida[0][1]){
        int temp = peca_escolhida[0][1];
        peca_escolhida[0][1] = peca_escolhida[0][0];
        peca_escolhida[0][0] = temp;
        return true;
    }else{
        return false;


    }
}
int imprimiraspecasdamesaesquerda ( int ladoesquerdo[][2] , int quantidadeesquerda){
    printf("MESA LADO ESQUERDO:\n");
    // Imprimir a primeira peça pela metade
    if (quantidadeesquerda == 0) {
        printf("   [    | %d ]", ladoesquerdo[0][0]);
    }else{
    

    // Imprimir as demais peças por completo
    for (int i = 0; i < quantidadeesquerda; i++) {
        printf("   [%d | %d]", ladoesquerdo[i][0], ladoesquerdo[i][1]);
    }
    }
    printf("\n");
    return 0;
}
int imprimiraspecasdamesadireita( int ladodireito[][2], int quantidadedireita ){
    printf("MESA LADO DIREITO:\n");

    // Imprimir a primeira peça pela metade
    if (quantidadedireita == 0) {
        printf("   [    | %d ]", ladodireito[0][1]);
    }else{

    // Imprimir as demais peças por completo
    for (int i = 0; i < quantidadedireita; i++) {
        printf("   [%d | %d]", ladodireito[i][0], ladodireito[i][1]);
    }
    }
    printf("\n");
    return 0;
}
int funcaofinaldoturno(){
    int finaldoturno;
    while(finaldoturno!=1 && finaldoturno!=2){
        printf("\nfim da rodada , pressione 1 para ir para a próxima ou 2 para salvar e voltar ao menu\n");
        scanf("%d",&finaldoturno);
    }
    if(finaldoturno==2){
        FILE *arquivo;
        arquivo = fopen("salvarjogo", "r");
        if (arquivo == NULL) {
            fprintf(stderr, "Não foi possível abrir o arquivo para leitura.\n");
            return 1;
        }

        // Leitura inicial do arquivo
        char buffer[100];
        fscanf(arquivo, "%s", buffer);
        printf("Conteúdo do arquivo antes da escrita: %s\n", buffer);

        fclose(arquivo);

        arquivo = fopen("salvarjogo", "w");

        if (arquivo == NULL) {
            fprintf(stderr, "Não foi possível abrir o arquivo para escrita.\n");
            return 1;
        }
        //escrita...
        fprintf(arquivo, "Adicionando mais uma linha no arquivo.\n");

        fclose(arquivo);

        printf("Operações de leitura e escrita concluídas com sucesso.\n");

        return 0;

    }
    if(finaldoturno==1){
        printf("avançando para o próximo turno\n");
    }
    return 0;
}
void criarDomino(int dominos[][2]) {
    int index = 0;
    for (int i = 0; i <= 6; i++) {
        for (int j = i; j <= 6; j++) {
            dominos[index][0] = i;
            dominos[index][1] = j;
            index++;
        }
    }
}
void embaralharDomino(int dominos[][2]) {
    srand(time(NULL));
    for (int i = TOTAL_PECAS - 1; i > 0; i--) {
        int j = rand() % (i + 1);
        int temp0 = dominos[i][0];
        int temp1 = dominos[i][1];
        dominos[i][0] = dominos[j][0];
        dominos[i][1] = dominos[j][1];
        dominos[j][0] = temp0;
        dominos[j][1] = temp1;
    }
}
void distribuirDomino(int dominos[][2], int jogador1[][2], int jogador2[][2], int pecasNaoDistribuidas[][2]) {
    int indexJogador1 = 0;
    int indexJogador2 = 0;
    int indexPecasNaoDistribuidas = 0;

    for (int i = 0; i < TOTAL_PECAS; i++) {
        if (i < 7) {
            jogador1[indexJogador1][0] = dominos[i][0];
            jogador1[indexJogador1][1] = dominos[i][1];
            indexJogador1++;
        } else if (i < 14) {
            jogador2[indexJogador2][0] = dominos[i][0];
            jogador2[indexJogador2][1] = dominos[i][1];
            indexJogador2++;
        } else {
            pecasNaoDistribuidas[indexPecasNaoDistribuidas][0] = dominos[i][0];
            pecasNaoDistribuidas[indexPecasNaoDistribuidas][1] = dominos[i][1];
            indexPecasNaoDistribuidas++;
        }
    }
}
int* escolherPecaJogador1(int jogador1[][2], int indexjogador1) {
    int *escolha1 = (int*)malloc(2 * sizeof(int));  // Alocação dinâmica para armazenar a escolha

    do {
        printf("\ndigite os valores da peça desejada %d:\n", indexjogador1);

        // Exibir as peças disponíveis na mão do jogador 1
        imprimirPecas(jogador1, indexjogador1, "jogador1");
        scanf("%d", &escolha1[0]);
        scanf("%d", &escolha1[1]);

    } while (!validarEscolha1(escolha1, jogador1, indexjogador1));


    return escolha1;
}
int calcularMaiorDupla(int player[][2], int tamanho) {
    int maiorDupla = -1;
    for (int i = 0; i < tamanho; i++) {
        if (player[i][0] == player[i][1]) {
            int dupla = player[i][0] + player[i][1];
            if (dupla > maiorDupla) {
                maiorDupla = dupla;
            }
        }
    }

    return maiorDupla;
}
int calcularMaiorPeca(int player[][2], int tamanho) {
    int maiorSomaLados = -1;

    for (int i = 0; i < tamanho; i++) {
        int somaLados = player[i][0] + player[i][1];
        if (somaLados > maiorSomaLados) {
            maiorSomaLados = somaLados;
        }
    }

    return maiorSomaLados;
}
int main() {
    int i ;
    printf("BEM VINDO AO JOGO DE DOMINO!!! \n ");
    printf("SELECIONE O MODO DE JOGO :\n");
    printf("1. COMEÇE UM NOVO JOGO.\n 2. CONTINUE O JOGO ANTERIOR. ");
    scanf("%d", &i) ;
    if ( i != 1 && i!= 2 ){
        while (i != 1 && i!= 2) {
            printf("OPÇÃO INVÁLIDA , DIGITE O MODO DE JOGO NOVAMENTE !! ");
            scanf ("%d" , &i);

        }
    }
    if ( i == 1){
        int mesa [TAMANHO_MAX_MESA][2] ;
        int jogada;//esqueci pq fiz mas uma hora acho a utilidade dessa variavel
        int opcao; // decisao do q o jogador vai fazer
        int peca_escolhida1[0][2];//bem autoesplicativo
        int peca_escolhida2[0][2];
        int j1;//quantidade de peças do jogador 1 após alteraçoes
        int j2;//quantidade de peças do jogador 2 após alteraçoes
        int dominos[TOTAL_PECAS][2];
        int jogador1[PECAS_POR_JOGADOR][2];
        int jogador2[PECAS_POR_JOGADOR][2];
        int pecasNaoDistribuidas[TOTAL_PECAS - 14][2];
        int ladoesquerdo [TAMANHO_MAX_MESA][2];
        int ladodireito [TAMANHO_MAX_MESA][2];
        int quantidadedireita = 0;
        int quantidadeesquerda = 0 ;
        int decisao;
        int indexJogador1 = 7;
        int indexJogador2 = 7;
        int quantidade = 7 ;
        int pecadesejada[0][2];
        int escolha1[2];
        int escolha2[2];
        int indexpecasnaodistribuidas = 14;
        int compradepeca;
        criarDomino(dominos);
        embaralharDomino(dominos);
        distribuirDomino(dominos, jogador1, jogador2, pecasNaoDistribuidas);

        imprimirPecas(jogador1, 7, "Jogador 1");
        imprimirPecas(jogador2, 7, "Jogador 2");

        int maiorDuplaPlayer1 = calcularMaiorDupla(jogador1, 7);
        int maiorDuplaPlayer2 = calcularMaiorDupla(jogador2, 7);
        
        printf("Soma das duplas do jogador 1: %d\n", maiorDuplaPlayer1);
        printf("Soma das duplas do jogador 2: %d\n", maiorDuplaPlayer2);

        int maiorPecaPlayer1 = calcularMaiorPeca(jogador1, 7);
        int maiorPecaPlayer2 = calcularMaiorPeca(jogador2, 7);
        printf("Maior peça do jogador 1: %d\n", maiorPecaPlayer1);
        printf("Maior peça do jogador 2: %d\n", maiorPecaPlayer2);

        int primeiroJogador;
        if (maiorDuplaPlayer1 > maiorDuplaPlayer2) {
            printf("O jogador 1 tem a maior soma de duplas, então ele começa o jogo.\n");
            primeiroJogador = 1;
        } else if (maiorDuplaPlayer1 < maiorDuplaPlayer2) {
            printf("O jogador 2 tem a maior soma de duplas, então ele começa o jogo.\n");
            primeiroJogador = 2;
        }
        else {
            printf("Ambos os jogadores têm a mesma soma de duplas. Vamos verificar a maior peça.\n");
            if (maiorPecaPlayer1 > maiorPecaPlayer2) {
                printf("O jogador 1 tem a maior peça, então ele começa o jogo.\n");
                primeiroJogador = 1;
            } else if (maiorPecaPlayer1 < maiorPecaPlayer2) {
                printf("O jogador 2 tem a maior peça, então ele começa o jogo.\n");
                primeiroJogador = 2;
            } else {
                printf("Ambos os jogadores têm a mesma maior peça. Vamos decidir por ímpar ou par!!\n");

                int numeroPlayer1, numeroPlayer2;
                int somaDosNumeros;

                printf("Jogador 1, digite um número de 0 a 9: ");
                scanf("%d", &numeroPlayer1);

                printf("Jogador 2, digite um número de 0 a 9: ");
                scanf("%d", &numeroPlayer2);

                somaDosNumeros = numeroPlayer1 + numeroPlayer2;

                if (somaDosNumeros % 2 == 0) {
                    printf("A soma dos números é par. O jogador 1 começa.\n");
                    primeiroJogador = 1;

                } else {
                    printf("A soma dos números é ímpar. O jogador 2 começa.\n");
                    primeiroJogador = 2;
                }
            }
        }
        
        printf("\n\n\n\n\n");
        ladoesquerdo[0][0] = mesa[0][1];
        ladodireito[0][1] = mesa[0][0];
        if(primeiroJogador==1){
            ladoesquerdo[0][0]  =  jogador1[6][0] ; 
            ladodireito[0][1]  =   jogador1[6][1] ; 
            indexJogador1 = indexJogador1 - 1 ;
            do{
                turnojogador1 :
                imprimirPecas(jogador1, quantidade,"jogador1");
                imprimiraspecasdamesaesquerda (ladoesquerdo, quantidadeesquerda);
                imprimiraspecasdamesadireita(ladodireito, quantidadedireita );
                printf("\n\npeças na mao do oponente: %d" , indexJogador2 );
                while(opcao!=1 && opcao!=2 ){
                    printf("\n digite 1 para jogar uma peça: \n digite 2 para salvar: \n ");
                    scanf("%d",&opcao);
                }
                switch(opcao){
                    case 1:
                        // j+1 vai virar o index do jogador do looping  , ex : esse looping agr he do jogador 1 = indexjogador1
                        escolherPecaJogador1(jogador1, indexJogador1);
                        peca_escolhida1[0][0] = escolha1[0];
                        peca_escolhida1[0][1] = escolha1[1];
                        comparacaoesquerda(ladoesquerdo,  quantidadeesquerda ,  peca_escolhida1);
                        comparacaodireita(ladodireito,  quantidadedireita ,  peca_escolhida1);
                        if (comparacaoesquerda(ladoesquerdo,  quantidadeesquerda ,  peca_escolhida1) && comparacaodireita( ladodireito,  quantidadedireita ,  peca_escolhida1)){
                    printf("a peça encaixa em ambos os lados , direito e esquerdo ! , selecione o lado desejado \n 1.lado direito , 2. lado esquerdo");
                    scanf("%d", &decisao);
                    if ( decisao != 1 && decisao!= 2  ){
                        while (decisao != 1 && decisao!= 2) {
                            printf("OPÇÃO INVÁLIDA , DIGITE a opção novamente !!  ");
                            scanf ("%d" , &decisao);
                        }
                        if(decisao == 2){
                            quantidadeesquerda++;
                            ladoesquerdo[quantidadeesquerda][0] = peca_escolhida1[0][0];
                            ladoesquerdo[quantidadeesquerda][1] = peca_escolhida1[0][1];
                            quantidade = quantidade - 1 ;
                            indexJogador1 = indexJogador1 -  1;

                        }
                        if(decisao == 1){
                            quantidadedireita++;
                            ladodireito[quantidadedireita][0] = peca_escolhida1[0][0];
                            ladodireito[quantidadedireita][0] = peca_escolhida1[0][1];
                            quantidade = quantidade-1 ;
                            indexJogador1 = indexJogador1 -  1;
                        }
                    }
                    
                    }
                    if (comparacaoesquerda(ladoesquerdo , quantidadeesquerda ,  peca_escolhida1 )){
                        quantidadeesquerda++;
                        ladoesquerdo[quantidadeesquerda][0] = peca_escolhida1[0][0];
                        ladoesquerdo[quantidadeesquerda][1] = peca_escolhida1[0][1];
                        quantidade = quantidade-1 ;
                        indexJogador1 = indexJogador1 -  1;
                    }
                    if (comparacaodireita(ladodireito,  quantidadedireita ,  peca_escolhida1)){
                        quantidadedireita++;
                        ladodireito[quantidadedireita][0] = peca_escolhida1[0][0];
                        ladodireito[quantidadedireita][0] = peca_escolhida1[0][1];
                        quantidade = quantidade-1 ;
                        indexJogador2 = indexJogador1 -  1;
                    }
                    else{
                       do{

                        printf("essa peça nao encaixa em nenhum lado , compre uma da pilha .");
                        comprarPeca(pecasNaoDistribuidas, &indexpecasnaodistribuidas, jogador1, &indexJogador1);
                        imprimirPecas(jogador1,  indexJogador1 , "Jogador1");
                        escolherPecaJogador1( jogador1,  indexJogador1);
                        peca_escolhida1[0][0] = escolha1[0];
                        peca_escolhida1[0][1] = escolha1[1];
                        comparacaoesquerda( ladoesquerdo,  quantidadeesquerda ,  peca_escolhida1);
                        comparacaodireita( ladodireito,  quantidadedireita ,  peca_escolhida1);
                        if (comparacaoesquerda( ladoesquerdo ,  quantidadeesquerda ,  peca_escolhida1) && comparacaodireita(ladodireito,  quantidadedireita , peca_escolhida1)){
                    printf("a peça encaixa em ambos os lados , direito e esquerdo ! , selecione o lado desejado \n 1.lado direito , 2. lado esquerdo");
                    scanf("%d", &decisao);
                    if ( decisao != 1 && decisao!= 2 ){
                        while (decisao != 1 && decisao!= 2) {
                            printf("OPÇÃO INVÁLIDA , DIGITE a opção novamente !! ");
                            scanf ("%d" , &decisao);
                        }
                        if(decisao == 2){
                            quantidadeesquerda++;
                            ladoesquerdo[quantidadeesquerda][0] = peca_escolhida1[0][0];
                            ladoesquerdo[quantidadeesquerda][1] = peca_escolhida1[0][1];
                            quantidade = quantidade - 1 ;
                            indexJogador1 = indexJogador1 - 1;
                            compradepeca = 0;

                        }
                        if(decisao == 1){
                            quantidadedireita++;
                            ladodireito[quantidadedireita][0] = peca_escolhida1[0][0];
                            ladodireito[quantidadedireita][0] = peca_escolhida1[0][1];
                            quantidade = quantidade-1 ;
                            indexJogador1 = indexJogador1 - 1;
                            compradepeca = 0;
                        }
                    }


                    }
                    if (comparacaoesquerda(ladoesquerdo, quantidadeesquerda ,  peca_escolhida1)){
                        quantidadeesquerda++;
                        ladoesquerdo[quantidadeesquerda][0] = peca_escolhida1[0][0];
                        ladoesquerdo[quantidadeesquerda][1] = peca_escolhida1[0][1];
                        quantidade = quantidade-1 ;
                        indexJogador1 = indexJogador1 -  1;
                        compradepeca = 0;
                    }
                    if (comparacaodireita(ladodireito,  quantidadedireita , peca_escolhida1)){
                        quantidadedireita++;
                        ladodireito[quantidadedireita][0] = peca_escolhida1[0][0];
                        ladodireito[quantidadedireita][0] = peca_escolhida1[0][1];
                        quantidade = quantidade-1 ;
                        indexJogador1 = indexJogador1 -  1;
                        compradepeca = 0;
                    }
                    else{
                        printf("infelizmente sua peça nao encaixa em nenhum canto :( . ");
                    }
                
                 
                    }while (compradepeca != 0 );
                
                }
                break ;
                case 2 : 
                 turno = 1;
                     salvarjogo1(pecasNaoDistribuidas, indexpecasnaodistribuidas, jogador1, indexJogador1, ladoesquerdo, quantidadeesquerda, jogador2, indexJogador2 , ladodireito , quantidadedireita , turno , quantidade ) ;
                break ; 
               

                printf("TURNO DO JOGADOR 2 \n\n\n");




                imprimirPecas( jogador2,  quantidade, "Jogador 2");
                imprimiraspecasdamesaesquerda (  ladoesquerdo,  quantidadeesquerda);
                imprimiraspecasdamesadireita(  ladodireito,  quantidadedireita );
                printf("\n\npeças na mao do oponente: %d" , indexJogador1 );
                while(opcao!=1 && opcao!=2 ){
                    printf("\n digite 1 para jogar uma peça: \n digite 2 para salvar \n ");
                    scanf("%d",&opcao);
                    printf("peças na mao do outro jogador %d " , indexJogador1 );
                }
                switch(opcao){
                    case 1:

                        escolherPecaJogador2( jogador2,  indexJogador2);
                        peca_escolhida2[0][0] = escolha2[0];
                        peca_escolhida2[0][1] = escolha2[1];
                        comparacaoesquerda( ladoesquerdo ,  quantidadeesquerda ,  peca_escolhida2 );
                        comparacaodireita( ladodireito,  quantidadedireita ,  peca_escolhida2);
                        if (comparacaoesquerda( ladoesquerdo ,  quantidadeesquerda ,  peca_escolhida2) && comparacaodireita( ladodireito,  quantidadedireita ,  peca_escolhida2)){
                    printf("a peça encaixa em ambos os lados , direito e esquerdo ! , selecione o lado desejado \n 1.lado direito , 2. lado esquerdo");
                    scanf("%d", &decisao);
                    if ( decisao != 1 && decisao!= 2 ){
                        while (decisao != 1 && decisao!= 2) {
                            printf("OPÇÃO INVÁLIDA , DIGITE a opção novamente !! ");
                            scanf ("%d" , &decisao);
                        }
                        if(decisao == 2){
                            quantidadeesquerda++;
                            ladoesquerdo[quantidadeesquerda][0] = peca_escolhida2[0][0];
                            ladoesquerdo[quantidadeesquerda][1] = peca_escolhida2[0][1];
                            quantidade = quantidade - 1 ;   
                            indexJogador2 = indexJogador2 -  1;

                        }
                        if(decisao == 1){
                            quantidadedireita++;
                            ladodireito[quantidadedireita][0] = peca_escolhida2[0][0];
                            ladodireito[quantidadedireita][0] = peca_escolhida2[0][1];
                            quantidade = quantidade-1 ;
                            indexJogador2 = indexJogador2 -  1;
                        }

                    }

                    }
                    if (comparacaoesquerda(ladoesquerdo , quantidadeesquerda ,  peca_escolhida2)){
                        quantidadeesquerda++;
                        ladoesquerdo[quantidadeesquerda][0] = peca_escolhida2[0][0];
                        ladoesquerdo[quantidadeesquerda][1] = peca_escolhida2[0][1];
                        quantidade = quantidade-1 ;
                        indexJogador2 = indexJogador2 -  1;
                    }
                    if (comparacaodireita(ladodireito,  quantidadedireita , peca_escolhida2)){
                        quantidadedireita++;
                        ladodireito[quantidadedireita][0] = peca_escolhida2[0][0];
                        ladodireito[quantidadedireita][0] = peca_escolhida2[0][1];
                        quantidade = quantidade-1 ;
                        indexJogador2 = indexJogador2 -  1;
                    }
                    else{
                       do {

                        printf("essa peça nao encaixa em nenhum lado , compre uma da pilha .");
                
                        comprarPeca(pecasNaoDistribuidas, &indexpecasnaodistribuidas, jogador2, &indexJogador2);
                        imprimirPecas( jogador2,  indexJogador2 , "Jogador2");
                        escolherPecaJogador2( jogador2,  indexJogador2);
                        peca_escolhida2[0][0] = escolha2[0];
                        peca_escolhida2[0][1] = escolha2[1];
                        comparacaoesquerda( ladoesquerdo ,  quantidadeesquerda ,  peca_escolhida2);
                        comparacaodireita( ladodireito,  quantidadedireita ,  peca_escolhida2);
                        if (comparacaoesquerda( ladoesquerdo ,  quantidadeesquerda ,  peca_escolhida2) && comparacaodireita( ladodireito,  quantidadedireita ,  peca_escolhida2)){
                    printf("a peça encaixa em ambos os lados , direito e esquerdo ! , selecione o lado desejado \n 1.lado direito , 2. lado esquerdo");
                    scanf("%d", &decisao);
                    if ( decisao != 1 && decisao!= 2 ){
                        while (decisao != 1 && decisao!= 2) {
                            printf("OPÇÃO INVÁLIDA , DIGITE a opção novamente !! ");
                            scanf ("%d" , &decisao);
                        }
                        if(decisao == 2){
                            quantidadeesquerda++;
                            ladoesquerdo[quantidadeesquerda][0] = peca_escolhida2[0][0];
                            ladoesquerdo[quantidadeesquerda][1] = peca_escolhida2[0][1];
                            quantidade = quantidade - 1 ;
                            indexJogador2 = indexJogador2 -  1;
                            compradepeca = 0;


                        }
                        if(decisao == 1){
                            quantidadedireita++;
                            ladodireito[quantidadedireita][0] = peca_escolhida2[0][0];
                            ladodireito[quantidadedireita][0] = peca_escolhida2[0][1];
                            quantidade = quantidade-1 ;
                            indexJogador2 = indexJogador2 -  1;
                            compradepeca = 0;
                        }

                    }

                    }
                    if (comparacaoesquerda(ladoesquerdo , quantidadeesquerda ,  peca_escolhida2 )){
                        quantidadeesquerda++;
                        ladoesquerdo[quantidadeesquerda][0] = peca_escolhida2[0][0];
                        ladoesquerdo[quantidadeesquerda][1] = peca_escolhida2[0][1];
                        quantidade = quantidade-1 ;
                        indexJogador2 = indexJogador2 -  1;
                        compradepeca = 0;

                    }
                    if (comparacaodireita( ladodireito,  quantidadedireita ,  peca_escolhida2)){
                        quantidadedireita++;
                        ladodireito[quantidadedireita][0] = peca_escolhida2[0][0];
                        ladodireito[quantidadedireita][0] = peca_escolhida2[0][1];
                        quantidade = quantidade-1 ;
                        indexJogador2 = indexJogador2 -  1;
                        compradepeca = 0;
                    }
                    else{
                        printf("infelizmente sua peça nao encaixa em nenhum canto :(  . ");
                    }
                  } while (compradepeca != 0 );
           
                    }

                break;

               case 2 :// salvar o jogo 
               turno = 2;
                  salvarjogo1(pecasNaoDistribuidas, indexpecasnaodistribuidas, jogador1, indexJogador1, ladoesquerdo, quantidadeesquerda, jogador2, indexJogador2 , ladodireito , quantidadedireita , turno , quantidade ) ;
                break ;
                


                }
               

                }

            }while(0!= indexJogador1 && 0!=indexJogador2);





        }else{
             ladoesquerdo[0][0]  =  jogador2[6][0] ; 
             ladodireito[0][1]  =   jogador2[6][1] ; 
             indexJogador2 = indexJogador2 - 1 ;
            do{
                turnojogador2 :
                printf("RODADA DO JOGADOR 2 \n\n");
                imprimirPecas( jogador2,  quantidade, "Jogador 2");
                imprimiraspecasdamesaesquerda (  ladoesquerdo  ,  quantidadeesquerda);
                imprimiraspecasdamesadireita(  ladodireito,  quantidadedireita );
                printf("\n\npeças na mao do oponente: %d" , indexJogador1 );
                while(opcao!=1 && opcao!=2 ){
                    printf("\n digite 1 para jogar uma peça: \n digite 2 para salvar:  \n");
                    scanf("%d",&opcao);
                    
                }
                switch(opcao){
                    case 1:
                        escolherPecaJogador2( jogador2,  indexJogador2);
                        peca_escolhida2[0][0] = escolha2[0];
                        peca_escolhida2[0][1] = escolha2[1];
                        comparacaoesquerda( ladoesquerdo ,  quantidadeesquerda ,  peca_escolhida2);
                        comparacaodireita( ladodireito,  quantidadedireita ,  peca_escolhida2);
                        if (comparacaoesquerda( ladoesquerdo,  quantidadeesquerda ,  peca_escolhida2) && comparacaodireita( ladodireito,  quantidadedireita ,  peca_escolhida2)){
                    printf("a peça encaixa em ambos os lados , direito e esquerdo ! , selecione o lado desejado \n 1.lado direito , 2. lado esquerdo");
                    scanf("%d", &decisao);
                    if ( decisao != 1 && decisao!= 2 ){
                        while (decisao != 1 && decisao!= 2 ) {
                            printf("OPÇÃO INVÁLIDA , DIGITE a opção novamente !! ");
                            scanf ("%d" , &decisao);
                        }
                        if(decisao == 2){
                            quantidadeesquerda++;
                            ladoesquerdo[quantidadeesquerda][0] = peca_escolhida2[0][0];
                            ladoesquerdo[quantidadeesquerda][1] = peca_escolhida2[0][1];
                            quantidade = quantidade - 1 ;
                            indexJogador2 = indexJogador2 -  1;

                        }
                        if(decisao == 1){
                            quantidadedireita++;
                            ladodireito[quantidadedireita][0] = peca_escolhida2[0][0];
                            ladodireito[quantidadedireita][0] = peca_escolhida2[0][1];
                            quantidade = quantidade-1 ;
                            indexJogador2 = indexJogador2 -  1;
                        }

                    }

                    }
                    if (comparacaoesquerda(ladoesquerdo, quantidadeesquerda ,  peca_escolhida2 )){
                        quantidadeesquerda++;
                        ladoesquerdo[quantidadeesquerda][0] = peca_escolhida2[0][0];
                        ladoesquerdo[quantidadeesquerda][1] = peca_escolhida2[0][1];
                        quantidade = quantidade-1 ;
                        indexJogador2 = indexJogador2 -  1;
                    }
                    if (comparacaodireita(ladodireito,  quantidadedireita , peca_escolhida2)){
                        quantidadedireita++;
                        ladodireito[quantidadedireita][0] = peca_escolhida2[0][0];
                        ladodireito[quantidadedireita][0] = peca_escolhida2[0][1];
                        quantidade = quantidade-1 ;
                        indexJogador2 = indexJogador2 -  1;
                    }
                    else{
                       do{

                            printf("essa peça nao encaixa em nenhum lado , compre uma da pilha .");
                            comprarPeca(pecasNaoDistribuidas, &indexpecasnaodistribuidas, jogador2, &indexJogador2);
                            imprimirPecas( jogador2,  indexJogador2 , "Jogador2");
                            escolherPecaJogador2( jogador2,  indexJogador2);
                            peca_escolhida2[0][0] = escolha2[0];
                            peca_escolhida2[0][1] = escolha2[1];

                            comparacaoesquerda( ladoesquerdo ,  quantidadeesquerda ,  peca_escolhida2 );
                            comparacaodireita( ladodireito,  quantidadedireita ,  peca_escolhida2);
                            if (comparacaoesquerda( ladoesquerdo,  quantidadeesquerda ,  peca_escolhida2 ) && comparacaodireita( ladodireito,  quantidadedireita ,  peca_escolhida2)){
                                printf("a peça encaixa em ambos os lados , direito e esquerdo ! , selecione o lado desejado \n 1.lado direito , 2. lado esquerdo");
                                scanf("%d", &decisao);
                                if ( decisao != 1 && decisao!= 2 ){
                                    while (decisao != 1 && decisao!= 2) {
                                        printf("OPÇÃO INVÁLIDA , DIGITE a opção novamente !! ");
                                        scanf ("%d" , &decisao);
                                    }
                                    if(decisao == 2){
                                        quantidadeesquerda++;
                                        ladoesquerdo[quantidadeesquerda][0] = peca_escolhida2[0][0];
                                        ladoesquerdo[quantidadeesquerda][1] = peca_escolhida2[0][1];
                                        quantidade = quantidade - 1 ;
                                        indexJogador2 = indexJogador2 -  1;
                                        compradepeca = 0;

                                    }
                                    if(decisao == 1){
                                        quantidadedireita++;
                                        ladodireito[quantidadedireita][0] = peca_escolhida2[0][0];
                                        ladodireito[quantidadedireita][0] = peca_escolhida2[0][1];
                                        quantidade = quantidade-1 ;
                                        indexJogador2 = indexJogador2 -  1;
                                        compradepeca = 0;

                                    }

                                }

                                }
                                if (comparacaoesquerda(ladoesquerdo, quantidadeesquerda ,  peca_escolhida2 )){
                                    quantidadeesquerda++;
                                    ladoesquerdo[quantidadeesquerda][0] = peca_escolhida2[0][0];
                                    ladoesquerdo[quantidadeesquerda][1] = peca_escolhida2[0][1];
                                    quantidade = quantidade-1 ;
                                    indexJogador2 = indexJogador2 -  1;
                                    compradepeca = 0;
                                }
                                if (comparacaodireita( ladodireito,  quantidadedireita ,  peca_escolhida2)){
                                    quantidadedireita++;
                                    ladodireito[quantidadedireita][0] = peca_escolhida2[0][0];
                                    ladodireito[quantidadedireita][0] = peca_escolhida2[0][1];
                                    quantidade = quantidade-1 ;
                                    indexJogador2 = indexJogador2 -  1;
                                    compradepeca = 0;
                                }
                                else{
                                    printf("infelizmente sua peça nao encaixa em nenhum canto :( . ");
                                }
                            
                        }while (compradepeca != 0 );

                       
                  }
                  break ; 


                  case 2 : 
                  turno = 2;
                  salvarjogo1(pecasNaoDistribuidas, indexpecasnaodistribuidas, jogador1, indexJogador1, ladoesquerdo, quantidadeesquerda, jogador2, indexJogador2 , ladodireito , quantidadedireita , turno , quantidade  ) ;
                break ; 





             }
                       





             

                printf("TURNO DO JOGADOR 1 \n\n");


                imprimirPecas( jogador1,  quantidade,"jogador1");
                imprimiraspecasdamesaesquerda (  ladoesquerdo ,  quantidadeesquerda);
                imprimiraspecasdamesadireita(  ladodireito,  quantidadedireita );
                printf("\n\npeças na mao do oponente: %d" , indexJogador2 );
                while(opcao!=1 && opcao!=2 ){
                    printf("\n digite 1 para jogar uma peça: \n digite 2 para salvar: \n");
                    scanf("%d",&opcao);

                }
                switch(opcao){
                    case 1:
                        escolherPecaJogador1(jogador1,  indexJogador1);
                        peca_escolhida1[0][0] = escolha1[0];
                        peca_escolhida1[0][1] = escolha1[1];
                      
                        comparacaoesquerda( ladoesquerdo ,  quantidadeesquerda ,  peca_escolhida1 );
                        comparacaodireita( ladodireito,  quantidadedireita ,  peca_escolhida1);
                        if (comparacaoesquerda( ladoesquerdo ,  quantidadeesquerda ,  peca_escolhida1 ) && comparacaodireita( ladodireito,  quantidadedireita ,  peca_escolhida1)){
                    printf("a peça encaixa em ambos os lados , direito e esquerdo ! , selecione o lado desejado \n 1.lado direito , 2. lado esquerdo");
                    scanf("%d", &decisao);
                    if ( decisao != 1 && decisao!= 2  ){
                        while (decisao != 1 && decisao!= 2) {
                            printf("OPÇÃO INVÁLIDA , DIGITE a opção novamente !! ");
                            scanf ("%d" , &decisao);
                        }
                        if(decisao == 2){
                            quantidadeesquerda++;
                            ladoesquerdo[quantidadeesquerda][0] = peca_escolhida1[0][0];
                            ladoesquerdo[quantidadeesquerda][1] = peca_escolhida1[0][1];
                            quantidade = quantidade - 1 ;
                            indexJogador2 = indexJogador2 -  1;

                        }
                        if(decisao == 1){
                            quantidadedireita++;
                            ladodireito[quantidadedireita][0] = peca_escolhida1[0][0];
                            ladodireito[quantidadedireita][0] = peca_escolhida1[0][1];
                            quantidade = quantidade-1 ;
                            indexJogador2 = indexJogador2 -  1;
                        }

                    }

                    }
                    if (comparacaoesquerda(ladoesquerdo , quantidadeesquerda ,  peca_escolhida1)){
                        quantidadeesquerda++;
                        ladoesquerdo[quantidadeesquerda][0] = peca_escolhida1[0][0];
                        ladoesquerdo[quantidadeesquerda][1] = peca_escolhida1[0][1];
                        quantidade = quantidade-1 ;
                        indexJogador2 = indexJogador2 -  1;
                    }
                    if (comparacaodireita( ladodireito,  quantidadedireita ,  peca_escolhida1)){
                        quantidadedireita++;
                        ladodireito[quantidadedireita][0] = peca_escolhida1[0][0];
                        ladodireito[quantidadedireita][0] = peca_escolhida1[0][1];
                        quantidade = quantidade-1 ;
                        indexJogador2 = indexJogador2 -  1;
                    }
                    else{
                       
                    
                        do{
                            printf("essa peça nao encaixa em nenhum lado , compre uma da pilha .");
                            comprarPeca(pecasNaoDistribuidas, &indexpecasnaodistribuidas, jogador1, &indexJogador1);
                            imprimirPecas( jogador2,  indexJogador1 , "Jogador1");
                            escolherPecaJogador1( jogador1,  indexJogador1);
                            peca_escolhida1[0][0] = escolha1[0];
                            peca_escolhida1[0][1] = escolha1[1];

                            comparacaoesquerda( ladoesquerdo,  quantidadeesquerda ,  peca_escolhida1);
                            comparacaodireita( ladodireito,  quantidadedireita ,  peca_escolhida1);
                            if (comparacaoesquerda( ladoesquerdo ,  quantidadeesquerda ,  peca_escolhida1) && comparacaodireita( ladodireito,  quantidadedireita ,  peca_escolhida1)){
                                printf("a peça encaixa em ambos os lados , direito e esquerdo ! , selecione o lado desejado \n 1.lado direito , 2. lado esquerdo");
                                scanf("%d", &decisao);
                                if ( decisao != 1 && decisao!= 2 ){
                                    while (decisao != 1 && decisao!= 2) {
                                        printf("OPÇÃO INVÁLIDA , DIGITE a opção novamente !! ");
                                        scanf ("%d" , &decisao);
                                    }
                                    if(decisao == 2){
                                        quantidadeesquerda++;
                                        ladoesquerdo[quantidadeesquerda][0] = peca_escolhida1[0][0];
                                        ladoesquerdo[quantidadeesquerda][1] = peca_escolhida1[0][1];
                                        quantidade = quantidade - 1 ;
                                        indexJogador1 = indexJogador1 -  1;
                                        compradepeca = 0;

                                    }
                                    if(decisao == 1){
                                        quantidadedireita++;
                                        ladodireito[quantidadedireita][0] = peca_escolhida1[0][0];
                                        ladodireito[quantidadedireita][0] = peca_escolhida1[0][1];
                                        quantidade = quantidade-1 ;
                                        indexJogador1 = indexJogador1 -  1;
                                        compradepeca = 0;
                                    }

                                }

                                }
                                if (comparacaoesquerda(ladoesquerdo , quantidadeesquerda ,  peca_escolhida1 )){
                                    quantidadeesquerda++;
                                    ladoesquerdo[quantidadeesquerda][0] = peca_escolhida1[0][0];
                                    ladoesquerdo[quantidadeesquerda][1] = peca_escolhida1[0][1];
                                    quantidade = quantidade-1 ;
                                    indexJogador1 = indexJogador1 -  1;
                                    compradepeca = 0;
                                }
                                if (comparacaodireita( ladodireito,  quantidadedireita ,  peca_escolhida1)){
                                    quantidadedireita++;
                                    ladodireito[quantidadedireita][0] = peca_escolhida1[0][0];
                                    ladodireito[quantidadedireita][0] = peca_escolhida1[0][1];
                                    quantidade = quantidade-1 ;
                                    indexJogador1 = indexJogador1 -  1;
                                    compradepeca = 0;
                                }
                                else{
                                    printf("infelizmente sua peça nao encaixa em nenhum canto :( .\n\n  ");
                                }
                            }while (compradepeca != 0 );
                    
                    }

                    break ; 
                    case 2 : 
                    turno = 1;
                   
                     salvarjogo1(pecasNaoDistribuidas, indexpecasnaodistribuidas, jogador1, indexJogador1, ladoesquerdo, quantidadeesquerda, jogador2, indexJogador2 , ladodireito , quantidadedireita , turno , quantidade ) ;
                    break ; 
                        



                }
                    

              



            }while(0!=indexJogador1 && 0!=indexJogador2);
        }

        if(indexJogador1 == 0){
            printf("\n--------VITÓRIA--------\n\n---Jogador 1 ganhou----\n");
        }
        if(indexJogador2 ==0){
            printf("\n--------VITÓRIA--------\n\n---Jogador 2 ganhou----\n");
        }
        printf("\n\n---------------------------\n>>>>>>> FIM DE JOGO <<<<<<<\n---------------------------\n\n.....retornando ao menu.....");
        return 0;
        

    }else{

     carregarjogo1();
         if (turno == 1){
            goto turnojogador1;
         }else{
            goto turnojogador2;
         }
        





        return 0 ;
    }
}   
